{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xOQDdT2QQfAR"
   },
   "source": [
    "# Treino do zero (*from scratch*)\n",
    "\n",
    "Neste script vamos conhecer a estratégia de treino tradicional de redes neurais em geral: **O treino do zero (*from scratch*)**. <br>\n",
    "Trataremos do uso mais tradicional de CNNs: **classificação de imagens**.\n",
    "\n",
    "\n",
    "Primeiro de tudo, vamos fazer os imports."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8821e85d",
   "metadata": {
    "name": "seed"
   },
   "outputs": [],
   "source": [
    "# >>> Determinismo / Sementes\n",
    "import os, random\n",
    "import numpy as np\n",
    "import torch\n",
    "\n",
    "SEED = 42\n",
    "random.seed(SEED)\n",
    "np.random.seed(SEED)\n",
    "torch.manual_seed(SEED)\n",
    "torch.cuda.manual_seed_all(SEED)\n",
    "\n",
    "# Para resultados mais reprodutíveis (pode reduzir performance em GPU)\n",
    "torch.use_deterministic_algorithms(False)  # deixe True se quiser máximo determinismo\n",
    "torch.backends.cudnn.benchmark = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "g_B0cddsU33Y"
   },
   "outputs": [],
   "source": [
    "# Implementação e treinamento da rede\n",
    "\n",
    "# Importa o núcleo do PyTorch (tensores, CUDA, etc.).\n",
    "import torch\n",
    "\n",
    "# Traz os submódulos de redes neurais (nn) e otimizadores (optim).\n",
    "from torch import nn, optim\n",
    "# Agendadores de taxa de aprendizado.\n",
    "from torch.optim.lr_scheduler import ReduceLROnPlateau\n",
    "\n",
    "# Carregamento de Dados\n",
    "\n",
    "# Utilitário para criar DataLoaders (mini-batches, shuffle, workers paralelos).\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "# Datasets prontos (CIFAR-10, MNIST, etc.) do torchvision.\n",
    "from torchvision import datasets\n",
    "\n",
    "# Transforms para pré-processamento/augmentação (ToTensor, Normalize, Resize, ...).\n",
    "from torchvision import transforms\n",
    "\n",
    "# Seção de organização do script: métricas e visualização.\n",
    "# Plots e análises\n",
    "\n",
    "# Métrica de acurácia do scikit-learn.\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
    "\n",
    "# Biblioteca de gráficos.\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Visualização de matrizes em formato de heatmap.\n",
    "import seaborn as sns\n",
    "\n",
    "# Operações numéricas e arrays.\n",
    "import numpy as np\n",
    "\n",
    "# Medição de tempo e utilidades do SO (paths, variáveis de ambiente, etc.).\n",
    "import time, os\n",
    "\n",
    "# (Apenas em Jupyter) Renderiza gráficos do Matplotlib embutidos nas células.\n",
    "%matplotlib inline\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 35
    },
    "colab_type": "code",
    "id": "BCFjDoZr5aU7",
    "outputId": "ce85ed84-e42d-4d64-c097-adc97baba5a4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cpu\n"
     ]
    }
   ],
   "source": [
    "# Define os hiperparâmetros do treinamento em um dicionário.\n",
    "args = {\n",
    "    # Número total de épocas (passagens completas pelo dataset).\n",
    "    'epoch_num': 150,     # Número de épocas.\n",
    "    # Taxa de aprendizado inicial do otimizador.\n",
    "    'lr': 1e-3,           # Taxa de aprendizado.\n",
    "    # Penalidade L2 aplicada aos pesos para reduzir overfitting.\n",
    "    #    'weight_decay': 1e-3, # Penalidade L2 (Regularização).\n",
    "    'weight_decay': 5e-3, # Penalidade L2 (Regularização).\n",
    "    # Quantidade de amostras processadas por iteração.\n",
    "    'batch_size': 50,     # Tamanho do batch.\n",
    "}\n",
    "\n",
    "# Verifica se há GPU CUDA disponível para acelerar o treinamento.\n",
    "# Definindo dispositivo de hardware\n",
    "# if torch.cuda.is_available():\n",
    "#     # Se houver CUDA, usa a GPU.\n",
    "#     args['device'] = torch.device('cuda')\n",
    "# else:\n",
    "#     # Caso contrário, recorre à CPU.\n",
    "#     args['device'] = torch.device('cpu')\n",
    "\n",
    "args['device'] = torch.device('cpu')\n",
    "\n",
    "# Mostra no console qual dispositivo foi selecionado.\n",
    "print(args['device'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "OqNPF0VmGZma"
   },
   "source": [
    "## Carregamento de Dados\n",
    "\n",
    "Usaremos o dataset [CIFAR10](https://www.cs.toronto.edu/~kriz/cifar.html), um conjunto de imagens RGB divididas em 10 categorias de objeto: avião, automóvel, pássaro, gato, veado, cachorro, sapo, cavalo, navio, caminhão. As imagens possuem $32 \\times 32$ pixels.\n",
    "\n",
    "Trata-se de um dataset de 60 mil imagens naturais (do mundo real), muito utilizado para avaliar a qualidade de modelos de aprendizado profundo.\n",
    "\n",
    "https://pytorch.org/docs/stable/torchvision/datasets.html#cifar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 35
    },
    "colab_type": "code",
    "id": "8M1qzFIc58Y3",
    "outputId": "6d139741-d363-47b0-8c1c-4841470b3c1f"
   },
   "outputs": [],
   "source": [
    "# Pipeline de transformações para TREINO e TESTE.\n",
    "# Importa utilitários de pré-processamento/augmentação de imagens do torchvision.\n",
    "from torchvision import transforms\n",
    "\n",
    "# Médias por canal (R, G, B) do CIFAR-10 para normalização.\n",
    "MEAN = (0.4914, 0.4822, 0.4465)\n",
    "\n",
    "# Desvios-padrão por canal (R, G, B) do CIFAR-10 para normalização.\n",
    "STD  = (0.2023, 0.1994, 0.2010)\n",
    "\n",
    "# Pipeline de transformações para TREINO: inclui aumentos de dados + normalização.\n",
    "train_transform = transforms.Compose([\n",
    "    # Crop aleatório 32×32 com padding=2; bordas preenchidas por reflexão (reduz overfitting).\n",
    "    transforms.RandomCrop(32, padding=2, padding_mode='reflect'),\n",
    "    # Flip horizontal aleatório com probabilidade de 40% (aumenta variação espacial).\n",
    "    transforms.RandomHorizontalFlip(p=0.4),\n",
    "    # Converte PIL/NumPy para Tensor (C×H×W) com valores em [0,1].\n",
    "    transforms.ToTensor(),\n",
    "    # Normaliza cada canal usando as estatísticas definidas acima (acelera/estabiliza o treino).\n",
    "    transforms.Normalize(MEAN, STD),\n",
    "])\n",
    "\n",
    "# Pipeline de transformações para TESTE: apenas conversão + normalização (sem augmentações).\n",
    "test_transform = transforms.Compose([\n",
    "    # Converte para Tensor mantendo a imagem intacta (sem aleatoriedade).\n",
    "    transforms.ToTensor(),\n",
    "    # Aplica a mesma normalização do treino para consistência.\n",
    "    transforms.Normalize(MEAN, STD),\n",
    "])\n",
    "\n",
    "# Instancia o dataset CIFAR-10 para TREINO no diretório atual.\n",
    "train_set = datasets.CIFAR10('.', \n",
    "# Seleciona o split de treino.\n",
    "                      train=True, \n",
    "# Aplica o pipeline de transformações com aumento de dados.\n",
    "                      transform=train_transform, \n",
    "# Faz o download se os arquivos não existirem localmente; fecha a chamada.\n",
    "                      download=True)\n",
    "\n",
    "# Instancia o dataset CIFAR-10 para TESTE no diretório atual.\n",
    "test_set = datasets.CIFAR10('.', \n",
    "# Seleciona o split de teste.\n",
    "                      train=False, \n",
    "# Usa o pipeline determinístico (sem augmentations) para avaliação.\n",
    "                      transform=test_transform, \n",
    "# Não força novo download (assume que já foi feito no train).\n",
    "                      download=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 116
    },
    "colab_type": "code",
    "id": "Oi-sd2Xq7LJz",
    "outputId": "357ecbca-a108-4a4b-8d44-26c639fc8026"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-2.1770618..2.6952004].\n",
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-2.4290657..2.5976489].\n",
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-2.351526..2.6952004].\n",
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-1.7692488..2.3440151].\n",
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-2.2933714..1.908451].\n",
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-2.3395875..1.6611518].\n",
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-2.4096808..2.7537313].\n",
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-2.0458004..2.7147107].\n",
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-2.1035852..2.518123].\n",
      "Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers). Got range [-2.024918..2.6756902].\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x200 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Cria uma figura com 1 linha e 10 subplots; o tamanho total é 20×2 polegadas.\n",
    "fig, axs = plt.subplots(1,10, figsize=(20, 2))\n",
    "\n",
    "# Itera sobre as 10 primeiras amostras do conjunto de teste.\n",
    "for i in range(10):\n",
    "  # Obtém a imagem (tensor) e o rótulo correspondente no índice i.\n",
    "  data, label = test_set[i]\n",
    "  # Converte de C×H×W para H×W×C para exibir corretamente com o Matplotlib.\n",
    "  axs[i].imshow(data.permute((1,2,0)))\n",
    "  # Remove os eixos para uma visualização limpa.\n",
    "  axs[i].axis('off')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "EVEf-GCDHtNf"
   },
   "outputs": [],
   "source": [
    "# Cria o DataLoader do conjunto de TREINO; entrega lotes do train_set ao modelo.\n",
    "train_loader = DataLoader(train_set, \n",
    "# Tamanho do mini-batch definido nos hiperparâmetros.\n",
    "                          batch_size=args['batch_size'], \n",
    "# Embaralha a ordem dos exemplos a cada época (boa prática no treino).\n",
    "                          shuffle=True)\n",
    "\n",
    "# Cria o DataLoader do conjunto de TESTE/validação.\n",
    "test_loader = DataLoader(test_set, \n",
    "# Usa o mesmo tamanho de lote para avaliação.\n",
    "                          batch_size=args['batch_size'], \n",
    "# Aqui está como True; em geral usa-se shuffle=False no teste para reprodutibilidade.\n",
    "                          shuffle=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "z2itzENY29Ty"
   },
   "source": [
    "## LeNet 5\n",
    "\n",
    "Primeiro de tudo, precisamos **implementar uma CNN**. Sim, chegou a hora de colocar em prática tudo que já sabemos sobre redes convolucionais, montando uma arquitetura completa!\n",
    "\n",
    "A arquitetura escolhida para essa aula é a LeNet. Ela é a primeira CNN bem sucedida da história, [proposta em 1998 pelo Yann LeCun](http://yann.lecun.com/exdb/publis/pdf/lecun-01a.pdf). \n",
    "\n",
    "<img src=\"Lenet1.png\" width=\"800\">\n",
    "\n",
    "<img src=\"Lenet2.jpeg\" width=\"700\">\n",
    "\n",
    "Vamos implementar blocos convolucionais incluindo todas as camadas que aprendemos nesse curso:\n",
    "```python\n",
    "net = nn.Sequential(\n",
    "          nn.Conv2d(...),\n",
    "          nn.BatchNorm2d(...),\n",
    "          nn.Tanh(), # Ativação específica da LeNet\n",
    "          nn.AvgPool2d(...), # Pooling específico da LeNet\n",
    "      )\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "yx8rF8UB29Az"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sequential(\n",
      "  (0): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (1): BatchNorm2d(6, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (2): Tanh()\n",
      "  (3): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
      "  (4): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (5): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (6): Tanh()\n",
      "  (7): AvgPool2d(kernel_size=2, stride=2, padding=0)\n",
      "  (8): Conv2d(16, 120, kernel_size=(5, 5), stride=(1, 1))\n",
      "  (9): BatchNorm2d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (10): Tanh()\n",
      "  (11): Flatten(start_dim=1, end_dim=-1)\n",
      "  (12): Linear(in_features=120, out_features=84, bias=True)\n",
      "  (13): Tanh()\n",
      "  (14): Linear(in_features=84, out_features=10, bias=True)\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "# Define a rede no estilo LeNet-5 usando um contêiner sequencial.\n",
    "net = nn.Sequential(\n",
    "# Bloco conv 1: 3 canais → 6 mapas, kernel 5, sem padding (32→28).\n",
    "        nn.Conv2d(3, 6, kernel_size=5, stride=1, padding=0),        # entrada: (b, 3, 32, 32) e saida: (b, 6, 28, 28)\n",
    "# Normaliza por canal (estabiliza treinamento).\n",
    "        nn.BatchNorm2d(6),\n",
    "# Ativação Tanh (seguindo o LeNet original).\n",
    "        nn.Tanh(),\n",
    "# Pooling médio 2×2 (reduz 28→14 em H e W).\n",
    "        nn.AvgPool2d(kernel_size=2, stride=2, padding=0),           # entrada: (b, 6, 28, 28) e saida: (b, 6, 14, 14)\n",
    "        \n",
    "# Bloco conv 2: 6→16 mapas, kernel 5, sem padding (14→10).\n",
    "        nn.Conv2d(6, 16, kernel_size=5, stride=1, padding=0),       # entrada: (b, 6, 14, 14) e saida: (b, 16, 10, 10)\n",
    "# BN para os 16 canais.\n",
    "        nn.BatchNorm2d(16),\n",
    "# Ativação Tanh.\n",
    "        nn.Tanh(),\n",
    "# Pooling médio 2×2 (10→5).\n",
    "        nn.AvgPool2d(kernel_size=2, stride=2, padding=0),           # entrada: (b, 16, 10, 10) e saida: (b, 16, 5, 5)\n",
    "        \n",
    "# Bloco conv 3: 16→120 mapas, kernel 5 cobrindo todo o 5×5 (5→1).\n",
    "        nn.Conv2d(16, 120, kernel_size=5, stride=1, padding=0),     # entrada: (b, 16, 5, 5) e saida: (b, 120, 1, 1)\n",
    "# BN para 120 canais.\n",
    "        nn.BatchNorm2d(120),\n",
    "# Ativação Tanh.\n",
    "        nn.Tanh(),\n",
    "# Achata o tensor (b,120,1,1) → (b,120).\n",
    "        nn.Flatten(),  # lineariza formando um vetor                # entrada: (b, 120, 1, 1) e saida: (b, 120*1*1) = (b, 120)\n",
    "        \n",
    "# Camada totalmente conectada: 120→84.\n",
    "        nn.Linear(120, 84),                                         # entrada: (b, 120) e saida: (b, 84)\n",
    "# Tanh novamente (padrão LeNet).\n",
    "        nn.Tanh(),\n",
    "# Camada de saída: 84→10 classes (CIFAR-10).\n",
    "        nn.Linear(84, 10),                                          # entrada: (b, 84) e saida: (b, 10)\n",
    "        )\n",
    "\n",
    "# Move o modelo para o dispositivo configurado (GPU se disponível, senão CPU).\n",
    "net = net.to(args['device'])\n",
    "\n",
    "print(net)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d9d5a15",
   "metadata": {
    "name": "hyper_override"
   },
   "outputs": [],
   "source": [
    "# >>> Hiperparâmetros e otimizador/scheduler (override recomendado)\n",
    "from torch import nn\n",
    "import torch\n",
    "\n",
    "# Loss com label smoothing\n",
    "criterion = nn.CrossEntropyLoss(label_smoothing=0.05)\n",
    "\n",
    "# Otimizador (SGD + momentum + weight decay)\n",
    "try:\n",
    "    optimizer = torch.optim.SGD(\n",
    "        net.parameters(), lr=0.1, momentum=0.9, weight_decay=5e-4, nesterov=True\n",
    "    )\n",
    "    print(\"Optimizer: SGD(lr=0.1, momentum=0.9, wd=5e-4, nesterov=True)\")\n",
    "except NameError as e:\n",
    "    print(\"Atenção: modelo 'net' ainda não definido ao rodar esta célula. Execute após criar o modelo.\")\n",
    "    \n",
    "# Scheduler (Cosine Annealing). Usa args['epoch_num'] se existir, senão T_max=80.\n",
    "from torch.optim.lr_scheduler import CosineAnnealingLR, ReduceLROnPlateau\n",
    "TMAX = None\n",
    "try:\n",
    "    TMAX = int(args.get('epoch_num', 80))\n",
    "except Exception:\n",
    "    TMAX = 80\n",
    "\n",
    "try:\n",
    "    scheduler = CosineAnnealingLR(optimizer, T_max=TMAX, eta_min=1e-4)\n",
    "    print(f\"Scheduler: CosineAnnealingLR(T_max={TMAX}, eta_min=1e-4)\")\n",
    "except Exception as e:\n",
    "    print(\"Falha ao criar scheduler Cosine. Mantenha o atual ou crie após definir optimizer/net.\", e)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "SsxmosWjUo9f"
   },
   "source": [
    "VGG16"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "XDpRre0gUn-Q"
   },
   "outputs": [],
   "source": [
    "# # Definindo a rede\n",
    "# net = nn.Sequential(\n",
    "#         ## ConvBlock 1\n",
    "#         nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1),      # entrada: (b, 3, 224, 224) e saida: (b, 64, 224, 224)\n",
    "#         nn.ReLU(),\n",
    "#         nn.MaxPool2d(kernel_size=2, stride=2, padding=0),          # entrada: (b, 64, 224, 224) e saida: (b, 64, 112, 112)\n",
    "        \n",
    "#         ## ConvBlock 2\n",
    "#         nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),    # entrada: (b, 64, 112, 112) e saida: (b, 128, 112, 112)\n",
    "#         nn.ReLU(),\n",
    "#         nn.MaxPool2d(kernel_size=2, stride=2, padding=0),          # entrada: (b, 128, 112, 112) e saida: (b, 128, 56, 56)\n",
    "        \n",
    "#         ## ConvBlock 3\n",
    "#         nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),   # entrada: (b, 128, 56, 56) e saida: (b, 256, 56, 56)\n",
    "#         nn.ReLU(),\n",
    "#         nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),   # entrada: (b, 256, 56, 56) e saida: (b, 256, 56, 56)\n",
    "#         nn.ReLU(),\n",
    "#         nn.MaxPool2d(kernel_size=2, stride=2, padding=0),          # entrada: (b, 256, 56, 56) e saida: (b, 256, 28, 28)\n",
    "        \n",
    "#         ## ConvBlock 4\n",
    "#         nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1),   # entrada: (b, 256, 28, 28) e saida: (b, 512, 28, 28)\n",
    "#         nn.ReLU(),\n",
    "#         nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1),   # entrada: (b, 512, 28, 28) e saida: (b, 512, 28, 28)\n",
    "#         nn.ReLU(),\n",
    "#         nn.MaxPool2d(kernel_size=2, stride=2, padding=0),          # entrada: (b, 512, 28, 28) e saida: (b, 512, 14, 14)\n",
    "        \n",
    "#         ## ConvBlock 4\n",
    "#         nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1),   # entrada: (b, 512, 14, 14) e saida: (b, 512, 14, 14)\n",
    "#         nn.ReLU(),\n",
    "#         nn.Conv2d(512, 512, kernel_size=3, stride=1, padding=1),   # entrada: (b, 512, 14, 14) e saida: (b, 512, 14, 14)\n",
    "#         nn.ReLU(),\n",
    "#         nn.MaxPool2d(kernel_size=2, stride=2, padding=0),          # entrada: (b, 512, 14, 14) e saida: (b, 512, 7, 7)\n",
    "#         nn.Flatten(),  # lineariza formando um vetor               # entrada: (b, 512, 7, 7) e saida: (b, 512*7*7) = (b, 25088)\n",
    " \n",
    "#         ## DenseBlock\n",
    "#         nn.Linear(25088, 4096),                                    # entrada: (b, 25088) e saida: (b, 4096)\n",
    "#         nn.ReLU(),\n",
    "#         nn.Linear(4096, 4096),                                     # entrada: (b, 4096) e saida: (b, 4096)\n",
    "#         nn.ReLU(),\n",
    "#         nn.Linear(4096, 10),                                       # entrada: (b, 4096) e saida: (b, 10)\n",
    "#         nn.Softmax(dim=-1)\n",
    "#         )\n",
    "\n",
    "# # Subindo no hardware de GPU (se disponível)\n",
    "# net = net.to(args['device'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "n_mcMxEiGdWO"
   },
   "source": [
    "# Estratégias de Treino"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "DEf-DBaVPHGi"
   },
   "source": [
    "## Do zero (From scratch)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "v-XdWeUXx1Im"
   },
   "source": [
    "O primeiro passo do treinamento do zero é definir os algoritmos que serão utilizados no processo de treinamento. Eles são:\n",
    "\n",
    "* **Função de perda**, que vai avaliar a qualidade da performance da rede a cada passo de treinamento;\n",
    "* **Otimizador**, que a partir da função de perda vai definir a melhor forma de atualizar os pesos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "pInOWfvTIPBl"
   },
   "outputs": [],
   "source": [
    "# Define a função de perda de entropia cruzada (adequada para classificação multi-classe) e move-a para o device (CPU/GPU).\n",
    "criterion = nn.CrossEntropyLoss().to(args['device'])\n",
    "\n",
    "# Cria o otimizador Adam para todos os parâmetros da rede, usando a taxa de aprendizado e o weight decay definidos em args.\n",
    "optimizer = optim.Adam(net.parameters(), lr=args['lr'], weight_decay=args['weight_decay'])\n",
    "\n",
    "# Controla a redução da taxa de aprendizado quando a perda de validação estagna.\n",
    "scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=3, min_lr=1e-5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "kdKiVlR_xzCk"
   },
   "source": [
    "Relembrando o passo a passo do fluxo de treinamento:\n",
    "\n",
    "* Iterar nas épocas\n",
    "* Iterar nos batches\n",
    "* Cast dos dados no dispositivo de hardware\n",
    "* Forward na rede e cálculo da loss\n",
    "* Zerar o gradiente do otimizador\n",
    "* Cálculo do gradiente e atualização dos pesos\n",
    "\n",
    "Para acompanhar a convergência do seu modelo (e garantir que tudo foi feito certinho), ao final de cada época podemos imprimir a média e o desvio padrão das perdas de cada iteração."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "stZS9TSSGdC-"
   },
   "outputs": [],
   "source": [
    "# Define a função de treinamento que executa uma época completa sobre o DataLoader de treino.\n",
    "def train(train_loader, net, epoch):\n",
    "\n",
    "  # Coloca a rede em modo de treino (ativa Dropout, atualiza as estatísticas do BatchNorm).\n",
    "  net.train()\n",
    "  \n",
    "  # Marca o início para medir o tempo gasto na época.\n",
    "  start = time.time()\n",
    "  \n",
    "  # Acumuladores: lista de perdas por lote e vetores de previsões/rótulos para calcular acurácia.\n",
    "  epoch_loss  = []\n",
    "  pred_list, rotulo_list = [], []\n",
    "  # Loop sobre os lotes (mini-batches) do conjunto de treino.\n",
    "  for batch in train_loader:\n",
    "    \n",
    "    # Desempacota o lote em tensores de entrada (dado) e rótulos (rotulo).\n",
    "    dado, rotulo = batch\n",
    "    \n",
    "    # Move dados e rótulos para o dispositivo (GPU/CPU) configurado.\n",
    "    dado = dado.to(args['device'])\n",
    "    rotulo = rotulo.to(args['device'])\n",
    "    \n",
    "    # Passagem direta: obtém logits (pontuações antes do softmax) para cada classe.\n",
    "    ypred = net(dado)\n",
    "    # Calcula a perda de entropia cruzada entre os logits e os rótulos verdadeiros.\n",
    "    loss = criterion(ypred, rotulo)\n",
    "    # Armazena a perda do lote (nota: .item() seria equivalente para obter um escalar em Python).\n",
    "    epoch_loss.append(loss.cpu().data)\n",
    "\n",
    "    # Extrai as classes previstas via argmax ao longo do eixo das classes.\n",
    "    _, pred = torch.max(ypred, axis=1)\n",
    "    # Guarda as predições no CPU como NumPy para métricas.\n",
    "    pred_list.append(pred.cpu().numpy())\n",
    "    # Guarda os rótulos verdadeiros no CPU como NumPy.\n",
    "    rotulo_list.append(rotulo.cpu().numpy())\n",
    "    \n",
    "    # Zera gradientes acumulados do passo anterior.\n",
    "    optimizer.zero_grad()\n",
    "    # Backprop: propaga o erro para calcular gradientes.\n",
    "    loss.backward()\n",
    "    # Atualiza os parâmetros conforme a regra do otimizador.\n",
    "    optimizer.step()\n",
    "   \n",
    "  # Converte a lista de perdas para array NumPy (facilita média e desvio).\n",
    "  epoch_loss = np.asarray(epoch_loss)\n",
    "  # Achata as listas de predições e rótulos para vetores 1D alinhados.\n",
    "  pred_list  = np.asarray(pred_list).ravel()\n",
    "  rotulo_list  = np.asarray(rotulo_list).ravel()\n",
    "\n",
    "  # Calcula a acurácia da época.\n",
    "  acc = accuracy_score(rotulo_list, pred_list)\n",
    "  \n",
    "  # Marca o fim e calcula o tempo total da época.\n",
    "  end = time.time()\n",
    "  # Imprime um resumo legível da época: perda média, desvio-padrão, acurácia (%) e tempo.\n",
    "  print('#################### Train ####################')\n",
    "  print('Epoch %d, Loss: %.4f +/- %.4f, Acc: %.2f, Time: %.2f' % (epoch, epoch_loss.mean(), epoch_loss.std(), acc*100, end-start))\n",
    "  \n",
    "  # Retorna a perda média da época (útil para plotar curva de treino).\n",
    "  return epoch_loss.mean()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "DHMGMlSP2Gg2"
   },
   "source": [
    "### Validação\n",
    "\n",
    "Para essa etapa, o PyTorch oferece dois artifícios:\n",
    "* ```model.eval()```: Impacta no *forward* da rede, informando as camadas caso seu comportamento mude entre fluxos (ex: dropout).\n",
    "* ```with torch.no_grad()```: Gerenciador de contexto que desabilita o cálculo e armazenamento de gradientes (economia de tempo e memória). Todo o código de validação deve ser executado dentro desse contexto.\n",
    "\n",
    "Exemplo de código para validação\n",
    "\n",
    "```python\n",
    "net.eval()\n",
    "with torch.no_grad():\n",
    "  for batch in test_loader:\n",
    "      # Código de validação\n",
    "```\n",
    "\n",
    "Existe o equivalente ao ```model.eval()``` para explicitar que a sua rede deve estar em modo de treino, é o ```model.train()```. Apesar de ser o padrão dos modelos, é boa prática definir também o modo de treinamento."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "JxbiYRdXG90z"
   },
   "outputs": [],
   "source": [
    "# Define a função de validação que roda a avaliação do modelo por uma época.\n",
    "def validate(test_loader, net, epoch):\n",
    "\n",
    "  # Coloca o modelo em modo de avaliação (desativa Dropout e usa BN com estatísticas fixas).\n",
    "  # Evaluation mode\n",
    "  net.eval()\n",
    "  \n",
    "  # Inicia a contagem de tempo desta fase de validação.\n",
    "  start = time.time()\n",
    "  \n",
    "  # Vetores para acumular perdas por lote e listas de predições/rótulos.\n",
    "  epoch_loss  = []\n",
    "  pred_list, rotulo_list = [], []\n",
    "  # Desativa o cálculo de gradientes para acelerar e economizar memória.\n",
    "  with torch.no_grad(): \n",
    "    # Itera pelos lotes do DataLoader de teste/validação.\n",
    "    for batch in test_loader:\n",
    "\n",
    "      # Desempacota o lote em tensores de entrada (imagens) e rótulos verdadeiros.\n",
    "      dado, rotulo = batch\n",
    "\n",
    "      # Move os dados para o dispositivo (GPU/CPU) configurado em args['device'].\n",
    "      # Cast do dado na GPU\n",
    "      dado = dado.to(args['device'])\n",
    "      # Move os rótulos para o mesmo dispositivo.\n",
    "      rotulo = rotulo.to(args['device'])\n",
    "\n",
    "      # Passagem direta (forward) para obter os logits preditos.\n",
    "      # Forward\n",
    "      ypred = net(dado)\n",
    "      # Calcula a perda de entropia cruzada entre logits e rótulos.\n",
    "      loss = criterion(ypred, rotulo)\n",
    "      # Guarda a perda do lote (nota: .item() seria uma alternativa direta ao escalar).\n",
    "      epoch_loss.append(loss.cpu().data)\n",
    "\n",
    "      # Obtém as classes previstas via argmax no eixo das classes.\n",
    "      _, pred = torch.max(ypred, axis=1)\n",
    "      # Acumula as predições no CPU como arrays NumPy para cálculo de métricas depois.\n",
    "      pred_list.append(pred.cpu().numpy())\n",
    "      # Acumula os rótulos verdadeiros.\n",
    "      rotulo_list.append(rotulo.cpu().numpy())\n",
    "\n",
    "  # Converte a lista de perdas em array NumPy para facilitar média e desvio.\n",
    "  epoch_loss = np.asarray(epoch_loss)\n",
    "  # Achata as listas de predições (N_lotes × batch → N_amostras).\n",
    "  pred_list  = np.asarray(pred_list).ravel()\n",
    "  # Achata as listas de rótulos (N_lotes × batch → N_amostras).\n",
    "  rotulo_list  = np.asarray(rotulo_list).ravel()\n",
    "\n",
    "  # Calcula a acurácia;\n",
    "  acc = accuracy_score(rotulo_list, pred_list)\n",
    "  \n",
    "  # Finaliza a contagem de tempo desta fase.\n",
    "  end = time.time()\n",
    "  # Cabeçalho para separar os logs de validação no console.\n",
    "  print('********** Validate **********')\n",
    "  # Imprime resumo: época, perda média, desvio padrão, acurácia (%) e tempo decorrido.\n",
    "  print('Epoch %d, Loss: %.4f +/- %.4f, Acc: %.2f, Time: %.2f\\n' % (epoch, epoch_loss.mean(), epoch_loss.std(), acc*100, end-start))\n",
    "  \n",
    "  # Retorna a perda média da época de validação (útil para monitorar curvas).\n",
    "  return epoch_loss.mean()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d114110",
   "metadata": {},
   "source": [
    "### Monitoramento das losses por época\n",
    "\n",
    "Executamos o ciclo completo de treinamento e validação, armazenando a loss média de cada época em `train_losses` e `test_losses`. Essas listas serão usadas logo abaixo para visualizar a evolução do aprendizado do modelo e interpretar os resultados finais.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "id": "l5L-NPIC8hk0",
    "outputId": "a44a3891-2cff-4822-d531-1d51cc0e3fc0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#################### Train ####################\n",
      "Epoch 0, Loss: 1.7208 +/- 0.1678, Acc: 38.39, Time: 25.69\n",
      "********** Validate **********\n",
      "Epoch 0, Loss: 1.5367 +/- 0.1239, Acc: 44.81, Time: 2.07\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 1, Loss: 1.5497 +/- 0.1355, Acc: 43.81, Time: 25.28\n",
      "********** Validate **********\n",
      "Epoch 1, Loss: 1.4545 +/- 0.1168, Acc: 47.71, Time: 2.12\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 2, Loss: 1.4903 +/- 0.1320, Acc: 45.96, Time: 26.65\n",
      "********** Validate **********\n",
      "Epoch 2, Loss: 1.4103 +/- 0.1379, Acc: 48.30, Time: 2.08\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 3, Loss: 1.4584 +/- 0.1329, Acc: 47.24, Time: 27.20\n",
      "********** Validate **********\n",
      "Epoch 3, Loss: 1.3729 +/- 0.1204, Acc: 50.97, Time: 2.14\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 4, Loss: 1.4286 +/- 0.1402, Acc: 48.32, Time: 27.14\n",
      "********** Validate **********\n",
      "Epoch 4, Loss: 1.3613 +/- 0.1355, Acc: 50.99, Time: 2.06\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 5, Loss: 1.3913 +/- 0.1371, Acc: 49.97, Time: 25.51\n",
      "********** Validate **********\n",
      "Epoch 5, Loss: 1.3493 +/- 0.1328, Acc: 51.51, Time: 2.10\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 6, Loss: 1.3758 +/- 0.1394, Acc: 50.76, Time: 26.70\n",
      "********** Validate **********\n",
      "Epoch 6, Loss: 1.3103 +/- 0.1371, Acc: 53.12, Time: 2.61\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 7, Loss: 1.3421 +/- 0.1406, Acc: 52.13, Time: 26.02\n",
      "********** Validate **********\n",
      "Epoch 7, Loss: 1.2597 +/- 0.1485, Acc: 55.19, Time: 2.04\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 8, Loss: 1.3160 +/- 0.1455, Acc: 53.37, Time: 26.15\n",
      "********** Validate **********\n",
      "Epoch 8, Loss: 1.2835 +/- 0.1438, Acc: 55.02, Time: 2.54\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 9, Loss: 1.2965 +/- 0.1438, Acc: 54.13, Time: 27.44\n",
      "********** Validate **********\n",
      "Epoch 9, Loss: 1.2739 +/- 0.1439, Acc: 54.71, Time: 2.05\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 10, Loss: 1.2805 +/- 0.1420, Acc: 54.98, Time: 28.11\n",
      "********** Validate **********\n",
      "Epoch 10, Loss: 1.3822 +/- 0.1455, Acc: 50.83, Time: 2.32\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 11, Loss: 1.2693 +/- 0.1471, Acc: 55.36, Time: 31.44\n",
      "********** Validate **********\n",
      "Epoch 11, Loss: 1.2194 +/- 0.1440, Acc: 56.60, Time: 3.08\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 12, Loss: 1.2575 +/- 0.1395, Acc: 55.60, Time: 29.05\n",
      "********** Validate **********\n",
      "Epoch 12, Loss: 1.3440 +/- 0.1378, Acc: 52.52, Time: 2.14\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 13, Loss: 1.2513 +/- 0.1425, Acc: 55.96, Time: 27.66\n",
      "********** Validate **********\n",
      "Epoch 13, Loss: 1.2623 +/- 0.1494, Acc: 54.60, Time: 2.33\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 14, Loss: 1.2489 +/- 0.1444, Acc: 55.88, Time: 27.08\n",
      "********** Validate **********\n",
      "Epoch 14, Loss: 1.2196 +/- 0.1264, Acc: 57.36, Time: 2.18\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 15, Loss: 1.2386 +/- 0.1395, Acc: 56.53, Time: 26.15\n",
      "********** Validate **********\n",
      "Epoch 15, Loss: 1.2188 +/- 0.1388, Acc: 57.03, Time: 2.23\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 16, Loss: 1.2353 +/- 0.1399, Acc: 56.60, Time: 26.26\n",
      "********** Validate **********\n",
      "Epoch 16, Loss: 1.2094 +/- 0.1374, Acc: 57.30, Time: 2.00\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 17, Loss: 1.2353 +/- 0.1468, Acc: 56.65, Time: 26.48\n",
      "********** Validate **********\n",
      "Epoch 17, Loss: 1.1805 +/- 0.1369, Acc: 58.74, Time: 2.11\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 18, Loss: 1.2267 +/- 0.1430, Acc: 56.95, Time: 27.24\n",
      "********** Validate **********\n",
      "Epoch 18, Loss: 1.2428 +/- 0.1405, Acc: 55.95, Time: 2.19\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 19, Loss: 1.2241 +/- 0.1409, Acc: 56.97, Time: 28.05\n",
      "********** Validate **********\n",
      "Epoch 19, Loss: 1.1557 +/- 0.1313, Acc: 59.68, Time: 2.05\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 20, Loss: 1.2162 +/- 0.1496, Acc: 57.24, Time: 26.06\n",
      "********** Validate **********\n",
      "Epoch 20, Loss: 1.2124 +/- 0.1589, Acc: 56.56, Time: 2.20\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 21, Loss: 1.2165 +/- 0.1397, Acc: 57.24, Time: 25.76\n",
      "********** Validate **********\n",
      "Epoch 21, Loss: 1.1946 +/- 0.1491, Acc: 57.68, Time: 2.29\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 22, Loss: 1.2158 +/- 0.1478, Acc: 57.50, Time: 25.68\n",
      "********** Validate **********\n",
      "Epoch 22, Loss: 1.1716 +/- 0.1514, Acc: 58.74, Time: 2.03\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 23, Loss: 1.2120 +/- 0.1396, Acc: 57.66, Time: 25.39\n",
      "********** Validate **********\n",
      "Epoch 23, Loss: 1.2547 +/- 0.1348, Acc: 54.49, Time: 2.19\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 24, Loss: 1.1663 +/- 0.1406, Acc: 59.28, Time: 26.13\n",
      "********** Validate **********\n",
      "Epoch 24, Loss: 1.1462 +/- 0.1527, Acc: 59.67, Time: 2.51\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 25, Loss: 1.1608 +/- 0.1439, Acc: 59.41, Time: 27.47\n",
      "********** Validate **********\n",
      "Epoch 25, Loss: 1.1545 +/- 0.1510, Acc: 59.31, Time: 2.29\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 26, Loss: 1.1559 +/- 0.1419, Acc: 59.63, Time: 26.05\n",
      "********** Validate **********\n",
      "Epoch 26, Loss: 1.1250 +/- 0.1502, Acc: 60.23, Time: 2.11\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 27, Loss: 1.1549 +/- 0.1422, Acc: 59.46, Time: 26.85\n",
      "********** Validate **********\n",
      "Epoch 27, Loss: 1.1298 +/- 0.1356, Acc: 60.95, Time: 2.17\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 28, Loss: 1.1483 +/- 0.1438, Acc: 59.77, Time: 26.67\n",
      "********** Validate **********\n",
      "Epoch 28, Loss: 1.1013 +/- 0.1321, Acc: 61.52, Time: 2.21\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 29, Loss: 1.1520 +/- 0.1489, Acc: 59.67, Time: 26.19\n",
      "********** Validate **********\n",
      "Epoch 29, Loss: 1.0889 +/- 0.1568, Acc: 61.80, Time: 2.09\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 30, Loss: 1.1472 +/- 0.1452, Acc: 59.90, Time: 25.85\n",
      "********** Validate **********\n",
      "Epoch 30, Loss: 1.1278 +/- 0.1607, Acc: 60.94, Time: 2.02\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 31, Loss: 1.1450 +/- 0.1443, Acc: 59.77, Time: 27.27\n",
      "********** Validate **********\n",
      "Epoch 31, Loss: 1.1378 +/- 0.1429, Acc: 60.96, Time: 2.08\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 32, Loss: 1.1397 +/- 0.1467, Acc: 60.30, Time: 26.56\n",
      "********** Validate **********\n",
      "Epoch 32, Loss: 1.1361 +/- 0.1394, Acc: 59.99, Time: 2.12\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 33, Loss: 1.1315 +/- 0.1452, Acc: 60.36, Time: 30.46\n",
      "********** Validate **********\n",
      "Epoch 33, Loss: 1.0965 +/- 0.1381, Acc: 62.06, Time: 2.10\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 34, Loss: 1.1054 +/- 0.1411, Acc: 61.42, Time: 26.11\n",
      "********** Validate **********\n",
      "Epoch 34, Loss: 1.0505 +/- 0.1303, Acc: 63.57, Time: 2.14\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 35, Loss: 1.0949 +/- 0.1398, Acc: 61.71, Time: 26.60\n",
      "********** Validate **********\n",
      "Epoch 35, Loss: 1.0668 +/- 0.1461, Acc: 62.71, Time: 2.08\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 36, Loss: 1.0871 +/- 0.1368, Acc: 62.15, Time: 25.82\n",
      "********** Validate **********\n",
      "Epoch 36, Loss: 1.0322 +/- 0.1421, Acc: 64.09, Time: 2.17\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 37, Loss: 1.0874 +/- 0.1399, Acc: 61.88, Time: 26.81\n",
      "********** Validate **********\n",
      "Epoch 37, Loss: 1.0598 +/- 0.1505, Acc: 62.96, Time: 2.02\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 38, Loss: 1.0842 +/- 0.1405, Acc: 62.24, Time: 25.82\n",
      "********** Validate **********\n",
      "Epoch 38, Loss: 1.0431 +/- 0.1411, Acc: 63.51, Time: 2.08\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 39, Loss: 1.0852 +/- 0.1459, Acc: 62.27, Time: 25.77\n",
      "********** Validate **********\n",
      "Epoch 39, Loss: 1.0531 +/- 0.1408, Acc: 63.38, Time: 2.27\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 40, Loss: 1.0769 +/- 0.1357, Acc: 62.58, Time: 25.38\n",
      "********** Validate **********\n",
      "Epoch 40, Loss: 1.1030 +/- 0.1484, Acc: 61.28, Time: 2.03\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 41, Loss: 1.0581 +/- 0.1361, Acc: 63.13, Time: 26.47\n",
      "********** Validate **********\n",
      "Epoch 41, Loss: 1.0111 +/- 0.1448, Acc: 65.01, Time: 2.16\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 42, Loss: 1.0532 +/- 0.1362, Acc: 63.32, Time: 28.46\n",
      "********** Validate **********\n",
      "Epoch 42, Loss: 1.0117 +/- 0.1526, Acc: 65.04, Time: 2.33\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 43, Loss: 1.0530 +/- 0.1415, Acc: 63.46, Time: 27.84\n",
      "********** Validate **********\n",
      "Epoch 43, Loss: 1.0107 +/- 0.1475, Acc: 65.04, Time: 2.06\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 44, Loss: 1.0510 +/- 0.1423, Acc: 63.47, Time: 27.27\n",
      "********** Validate **********\n",
      "Epoch 44, Loss: 1.0088 +/- 0.1349, Acc: 65.34, Time: 2.21\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 45, Loss: 1.0522 +/- 0.1433, Acc: 63.39, Time: 26.83\n",
      "********** Validate **********\n",
      "Epoch 45, Loss: 0.9959 +/- 0.1418, Acc: 65.77, Time: 2.05\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 46, Loss: 1.0551 +/- 0.1524, Acc: 63.46, Time: 26.61\n",
      "********** Validate **********\n",
      "Epoch 46, Loss: 1.0026 +/- 0.1461, Acc: 64.95, Time: 2.13\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 47, Loss: 1.0491 +/- 0.1450, Acc: 63.42, Time: 26.13\n",
      "********** Validate **********\n",
      "Epoch 47, Loss: 0.9987 +/- 0.1304, Acc: 65.49, Time: 2.13\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 48, Loss: 1.0473 +/- 0.1454, Acc: 63.46, Time: 26.39\n",
      "********** Validate **********\n",
      "Epoch 48, Loss: 1.0122 +/- 0.1391, Acc: 64.91, Time: 2.17\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 49, Loss: 1.0469 +/- 0.1460, Acc: 63.70, Time: 25.93\n",
      "********** Validate **********\n",
      "Epoch 49, Loss: 0.9980 +/- 0.1274, Acc: 65.64, Time: 2.12\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 50, Loss: 1.0437 +/- 0.1403, Acc: 63.77, Time: 25.90\n",
      "********** Validate **********\n",
      "Epoch 50, Loss: 0.9919 +/- 0.1485, Acc: 65.74, Time: 2.06\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 51, Loss: 1.0361 +/- 0.1467, Acc: 64.08, Time: 28.58\n",
      "********** Validate **********\n",
      "Epoch 51, Loss: 0.9812 +/- 0.1253, Acc: 66.23, Time: 2.38\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 52, Loss: 1.0343 +/- 0.1404, Acc: 63.93, Time: 31.98\n",
      "********** Validate **********\n",
      "Epoch 52, Loss: 0.9847 +/- 0.1448, Acc: 66.13, Time: 2.70\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 53, Loss: 1.0322 +/- 0.1375, Acc: 64.17, Time: 32.84\n",
      "********** Validate **********\n",
      "Epoch 53, Loss: 0.9810 +/- 0.1406, Acc: 66.43, Time: 2.74\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 54, Loss: 1.0322 +/- 0.1462, Acc: 64.26, Time: 32.01\n",
      "********** Validate **********\n",
      "Epoch 54, Loss: 0.9960 +/- 0.1481, Acc: 65.61, Time: 2.64\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 55, Loss: 1.0273 +/- 0.1399, Acc: 64.30, Time: 32.72\n",
      "********** Validate **********\n",
      "Epoch 55, Loss: 0.9801 +/- 0.1343, Acc: 66.30, Time: 2.62\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 56, Loss: 1.0291 +/- 0.1407, Acc: 64.33, Time: 31.23\n",
      "********** Validate **********\n",
      "Epoch 56, Loss: 0.9809 +/- 0.1395, Acc: 66.43, Time: 2.50\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 57, Loss: 1.0272 +/- 0.1464, Acc: 64.52, Time: 31.25\n",
      "********** Validate **********\n",
      "Epoch 57, Loss: 0.9885 +/- 0.1428, Acc: 65.79, Time: 2.58\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 58, Loss: 1.0291 +/- 0.1487, Acc: 64.24, Time: 30.40\n",
      "********** Validate **********\n",
      "Epoch 58, Loss: 0.9858 +/- 0.1497, Acc: 66.14, Time: 2.47\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 59, Loss: 1.0268 +/- 0.1470, Acc: 64.33, Time: 31.55\n",
      "********** Validate **********\n",
      "Epoch 59, Loss: 0.9814 +/- 0.1384, Acc: 66.17, Time: 2.31\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 60, Loss: 1.0259 +/- 0.1454, Acc: 64.61, Time: 29.09\n",
      "********** Validate **********\n",
      "Epoch 60, Loss: 0.9753 +/- 0.1279, Acc: 66.77, Time: 2.56\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 61, Loss: 1.0241 +/- 0.1448, Acc: 64.42, Time: 33.00\n",
      "********** Validate **********\n",
      "Epoch 61, Loss: 0.9813 +/- 0.1482, Acc: 66.33, Time: 2.75\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 62, Loss: 1.0198 +/- 0.1461, Acc: 64.53, Time: 38.25\n",
      "********** Validate **********\n",
      "Epoch 62, Loss: 0.9717 +/- 0.1383, Acc: 66.93, Time: 2.78\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 63, Loss: 1.0189 +/- 0.1432, Acc: 64.56, Time: 32.14\n",
      "********** Validate **********\n",
      "Epoch 63, Loss: 0.9726 +/- 0.1445, Acc: 66.85, Time: 2.93\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 64, Loss: 1.0181 +/- 0.1422, Acc: 64.84, Time: 32.92\n",
      "********** Validate **********\n",
      "Epoch 64, Loss: 0.9691 +/- 0.1357, Acc: 67.09, Time: 2.66\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 65, Loss: 1.0218 +/- 0.1372, Acc: 64.41, Time: 33.48\n",
      "********** Validate **********\n",
      "Epoch 65, Loss: 0.9721 +/- 0.1395, Acc: 66.74, Time: 2.65\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 66, Loss: 1.0187 +/- 0.1413, Acc: 64.55, Time: 32.91\n",
      "********** Validate **********\n",
      "Epoch 66, Loss: 0.9719 +/- 0.1404, Acc: 66.57, Time: 2.62\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 67, Loss: 1.0153 +/- 0.1408, Acc: 64.74, Time: 32.66\n",
      "********** Validate **********\n",
      "Epoch 67, Loss: 0.9797 +/- 0.1425, Acc: 66.42, Time: 2.69\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 68, Loss: 1.0172 +/- 0.1405, Acc: 64.69, Time: 31.65\n",
      "********** Validate **********\n",
      "Epoch 68, Loss: 0.9698 +/- 0.1305, Acc: 66.91, Time: 2.75\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 69, Loss: 1.0172 +/- 0.1396, Acc: 64.53, Time: 30.98\n",
      "********** Validate **********\n",
      "Epoch 69, Loss: 0.9683 +/- 0.1377, Acc: 66.88, Time: 2.65\n",
      "\n",
      "#################### Train ####################\n",
      "Epoch 70, Loss: 1.0149 +/- 0.1395, Acc: 64.77, Time: 30.95\n",
      "********** Validate **********\n",
      "Epoch 70, Loss: 0.9698 +/- 0.1338, Acc: 66.68, Time: 2.83\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# >>> Loop de treino com checkpoint, early stopping, EMA e scheduler compatível\n",
    "train_losses, test_losses = [], []\n",
    "\n",
    "best_loss = float('inf')\n",
    "patience = 12\n",
    "bad_epochs = 0\n",
    "\n",
    "for epoch in range(args['epoch_num']):\n",
    "    # ---- Treino ----\n",
    "    train_loss = train(train_loader, net, epoch)\n",
    "    train_losses.append(train_loss)\n",
    "\n",
    "    # Atualiza EMA após treinamento (assumindo que train() faz optimizer.step() internamente)\n",
    "    if 'ema_net' in globals() and use_ema:\n",
    "        with torch.no_grad():\n",
    "            for p, p_ema in zip(net.parameters(), ema_net.parameters()):\n",
    "                p_ema.data.mul_(ema_decay).add_(p.data, alpha=1-ema_decay)\n",
    "\n",
    "    # ---- Validação (avaliar no EMA se disponível) ----\n",
    "    _val_loss = validate(test_loader, net, epoch)  # mantém saída/prints originais\n",
    "    test_losses.append(_val_loss)\n",
    "\n",
    "    model_for_eval = ema_net if ('ema_net' in globals() and use_ema) else net\n",
    "    val_loss_eval, val_acc_eval = eval_loss_acc(model_for_eval, test_loader, criterion, args['device'])\n",
    "\n",
    "    # ---- Checkpoint do melhor (por val_loss) ----\n",
    "    improved = val_loss_eval < (best_loss - 1e-4)\n",
    "    if improved:\n",
    "        best_loss = val_loss_eval\n",
    "        bad_epochs = 0\n",
    "        torch.save({\n",
    "            'epoch': epoch,\n",
    "            'model_state_dict': model_for_eval.state_dict(),\n",
    "            'optimizer_state_dict': optimizer.state_dict(),\n",
    "            'val_loss': val_loss_eval,\n",
    "            'val_acc': val_acc_eval,\n",
    "        }, 'best_model.pt')\n",
    "        print(f\"✔️  Novo melhor modelo salvo (epoch {epoch}) | val_loss={val_loss_eval:.4f} | val_acc={val_acc_eval:.2f}%\")\n",
    "    else:\n",
    "        bad_epochs += 1\n",
    "\n",
    "    # ---- Scheduler step (compatível) ----\n",
    "    try:\n",
    "        from torch.optim.lr_scheduler import ReduceLROnPlateau as _Reduce\n",
    "        if isinstance(scheduler, _Reduce):\n",
    "            scheduler.step(val_loss_eval)\n",
    "        else:\n",
    "            scheduler.step()\n",
    "    except Exception as e:\n",
    "        pass  # caso não haja scheduler\n",
    "\n",
    "    # ---- Early Stopping ----\n",
    "    if bad_epochs >= patience:\n",
    "        print(f\"⏹️ Early stopping em epoch {epoch} (sem melhora em {patience} épocas). Melhor val_loss={best_loss:.4f}\")\n",
    "        break\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06c0a77c",
   "metadata": {},
   "source": [
    "### Curvas de perda\n",
    "\n",
    "Com as listas `train_losses` e `test_losses` preenchidas, o gráfico abaixo compara a perda média por época em treino e validação, ajudando a diagnosticar overfitting, underfitting ou convergência adequada do modelo.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d620d81",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cria uma figura 8×5 para os gráficos.\n",
    "plt.figure(figsize=(8, 5))\n",
    "\n",
    "# Plota a curva da loss de treino ao longo das épocas (1..N), marcando os pontos.\n",
    "plt.plot(range(1, len(train_losses) + 1), train_losses, label='Treino', marker='o')\n",
    "\n",
    "# Plota a curva da loss de validação ao longo das épocas, também com marcadores.\n",
    "plt.plot(range(1, len(test_losses) + 1), test_losses, label='Validação', marker='o')\n",
    "\n",
    "# Define o título do gráfico.\n",
    "plt.title('Evolução da loss por época')\n",
    "\n",
    "# Rotula o eixo X com “Época”.\n",
    "plt.xlabel('Época')\n",
    "\n",
    "# Rotula o eixo Y com “Loss média”.\n",
    "plt.ylabel('Loss média')\n",
    "\n",
    "# Adiciona uma grade discreta para facilitar a leitura.\n",
    "plt.grid(True, linestyle='--', alpha=0.5)\n",
    "\n",
    "# Exibe a legenda para distinguir as curvas.\n",
    "plt.legend()\n",
    "\n",
    "# Ajusta os espaçamentos para evitar cortes de textos/elementos.\n",
    "plt.tight_layout()\n",
    "\n",
    "# Renderiza o gráfico na saída.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6c0e171",
   "metadata": {},
   "source": [
    "### Avaliação final no conjunto de teste\n",
    "\n",
    "Após o treinamento, avaliamos o modelo utilizando todos os exemplos de teste. Serão exibidos o relatório de classificação (precisão, recall e F1 por classe) e a matriz de confusão, que evidencia em um mapa de calor onde o modelo acerta ou confunde as classes.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63e8c1fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cabeçalho informativo desta seção (aviso do propósito do bloco).\n",
    "# Gera métricas de classificação no conjunto de teste.\n",
    "\n",
    "# Coloca a rede em modo de avaliação (desativa dropout e usa BN com estatísticas fixas).\n",
    "net.eval()\n",
    "\n",
    "# Inicializa listas para acumular previsões e rótulos de todos os lotes.\n",
    "predicoes, alvos = [], []\n",
    "\n",
    "# Desativa o cálculo de gradientes para acelerar a inferência e economizar memória.\n",
    "with torch.no_grad():\n",
    "    # Itera pelos lotes do loader de teste, recebendo imagens e rótulos verdadeiros.\n",
    "    for imagens, rotulos in test_loader:\n",
    "        # Move o batch de imagens para o dispositivo (CPU/GPU) configurado.\n",
    "        imagens = imagens.to(args['device'])\n",
    "        # Move os rótulos para o mesmo dispositivo.\n",
    "        rotulos = rotulos.to(args['device'])\n",
    "        # Forward: calcula os logits/saídas do modelo para o batch.\n",
    "        saidas = net(imagens)\n",
    "        # Converte logits em classes previstas (índice do maior logit por amostra).\n",
    "        preds = saidas.argmax(dim=1)\n",
    "        # Armazena as predições no CPU como NumPy para posterior concatenação.\n",
    "        predicoes.append(preds.cpu().numpy())\n",
    "        # Armazena os rótulos verdadeiros no CPU como NumPy.\n",
    "        alvos.append(rotulos.cpu().numpy())\n",
    "\n",
    "# Concatena todos os rótulos em um único vetor 1D (ordem dos lotes preservada).\n",
    "y_true = np.concatenate(alvos)\n",
    "# Concatena todas as predições em um único vetor 1D.\n",
    "y_pred = np.concatenate(predicoes)\n",
    "# Obtém os nomes de classe (CIFAR-10: airplane, automobile, …) do dataset de treino.\n",
    "class_names = train_set.classes\n",
    "\n",
    "# Imprime um cabeçalho textual para o relatório de classificação.\n",
    "print('Relatório de classificação (teste):')\n",
    "# Gera precisão/recall/F1 por classe; requer: from sklearn.metrics import classification_report.\n",
    "print(classification_report(y_true, y_pred, target_names=class_names))\n",
    "\n",
    "# Calcula a matriz de confusão (linhas = verdade, colunas = predito).\n",
    "# Requer: from sklearn.metrics import confusion_matrix.\n",
    "conf_mat = confusion_matrix(y_true, y_pred)\n",
    "\n",
    "# Abre uma figura para o heatmap da matriz de confusão.\n",
    "plt.figure(figsize=(10, 8))\n",
    "\n",
    "# Plota a matriz de confusão como heatmap com rótulos nas bordas; requer: import seaborn as sns.\n",
    "sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues', xticklabels=class_names, yticklabels=class_names)\n",
    "\n",
    "# Define um título descritivo para o gráfico da matriz de confusão.\n",
    "plt.title('Matriz de confusão - Teste')\n",
    "\n",
    "# Rotula o eixo Y como “classe verdadeira”.\n",
    "plt.ylabel('Classe verdadeira')\n",
    "\n",
    "# Rotula o eixo X como “classe predita”.\n",
    "plt.xlabel('Classe predita')\n",
    "\n",
    "# Ajusta margens/espaçamentos para evitar cortes de textos.\n",
    "plt.tight_layout()\n",
    "\n",
    "# Renderiza o heatmap na saída.\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55502757",
   "metadata": {
    "name": "ema_init"
   },
   "outputs": [],
   "source": [
    "# >>> EMA (Exponential Moving Average) dos pesos\n",
    "import copy, torch\n",
    "\n",
    "use_ema = True\n",
    "ema_decay = 0.999\n",
    "\n",
    "try:\n",
    "    ema_net = copy.deepcopy(net).to(args['device'])\n",
    "    for p in ema_net.parameters():\n",
    "        p.requires_grad = False\n",
    "    print(\"EMA pronta (decay=0.999).\")\n",
    "except Exception as e:\n",
    "    print(\"Crie o modelo 'net' antes de executar a EMA:\", e)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f84ed1b",
   "metadata": {
    "name": "eval_helper"
   },
   "outputs": [],
   "source": [
    "# >>> Funções auxiliares para avaliar perda/acurácia\n",
    "import torch\n",
    "from torch.nn import functional as F\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "def eval_loss_acc(model, loader, criterion, device):\n",
    "    model.eval()\n",
    "    losses = []\n",
    "    y_true, y_pred = [], []\n",
    "    with torch.no_grad():\n",
    "        for x, y in loader:\n",
    "            x = x.to(device)\n",
    "            y = y.to(device)\n",
    "            logits = model(x)\n",
    "            loss = criterion(logits, y)\n",
    "            losses.append(loss.item())\n",
    "            preds = logits.argmax(dim=1)\n",
    "            y_true.append(y.cpu())\n",
    "            y_pred.append(preds.cpu())\n",
    "    import torch as _torch\n",
    "    y_true = _torch.cat(y_true).numpy()\n",
    "    y_pred = _torch.cat(y_pred).numpy()\n",
    "    acc = accuracy_score(y_true, y_pred) * 100.0\n",
    "    return float(np.mean(losses)), float(acc)\n"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "Treino-do-zero-Gabarito.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
